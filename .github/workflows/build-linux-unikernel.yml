name: Build or Retrieve Linux Kernel

on:
  workflow_call:
    inputs:
      kernel_version:
        description: 'Linux Kernel version to build'
        required: true
        type: string
      defconfig_file:
        description: 'Path to defconfig JSON'
        required: true
        type: string
      unikernel:
        description: 'Which unikernel to build (nginx or redis)'
        required: true
        type: string
      hypervisor:
        description: 'Which hypervisor to target (qemu or fc)'
        required: true
        type: string
      registry:
        default: 'harbor.nbfc.io'
        required: false
        type: string
    secrets:
      GIT_CLONE_PAT:
        required: false
      harbor_user:
        required: false
      harbor_secret:
        required: false

  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Linux Kernel version to build'
        required: true
        type: string
      defconfig_file:
        description: 'Path to defconfig JSON'
        required: true
        type: string
      unikernel:
        description: 'Which unikernel to build (nginx or redis)'
        required: true
        type: string
      hypervisor:
        description: 'Which hypervisor to target (qemu or fc)'
        required: true
        type: string
      registry:
        default: 'harbor.nbfc.io'
        required: false
        type: string
    secrets:
      GIT_CLONE_PAT:
        required: false
      harbor_user:
        required: false
      harbor_secret:
        required: false
      
env:    
  REGISTRY: ${{ github.event.inputs.registry || 'harbor.nbfc.io' }}
  # NOTE: We assume that a project named after the repo owner exists in the
  # registry. The image will be uploaded as <repo_name> under the <repo_owner>
  # project.
  REGISTRY_IMAGE: ${{ github.event.inputs.registry || 'harbor.nbfc.io' }}/${{ github.repository }}
  RUNNER_ARCH_MAP: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'

jobs:
  build-unikernel:
    runs-on: ${{ format('{0}-{1}', 'base-dind-2204', matrix.arch) }}
    strategy:
      matrix:
        arch: ["amd64"]
    outputs:
      digest-amd64: ${{ steps.set-outputs.outputs.digest-amd64 }}
      digest-arm64: ${{ steps.set-outputs.outputs.digest-arm64 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load defconfig JSON
        id: defconfig
        run: |
          DEFCONFIG=$(jq -c . "${{ inputs.defconfig_file }}")
          echo "defconfig=$DEFCONFIG" >> $GITHUB_OUTPUT
      
      - name: Set variables
        id: vars
        run: |
          CONFIG_HASH=$(echo -n "${{ steps.defconfig.outputs.defconfig }}" | md5sum | cut -d ' ' -f 1)
          echo "KERNEL_ARTIFACT=linux-kernel-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV
          echo "KERNEL_ARTIFACT_FC=linux-kernel-fc-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV
          echo "UNIKERNEL_NAME=${{ inputs.unikernel }}" >> $GITHUB_ENV
          echo "HYPERVISOR=${{ inputs.hypervisor }}" >> $GITHUB_ENV
          if [ "${{ inputs.hypervisor }}" = "fc" ]; then
            echo "ARTIFACT_NAME=linux-kernel-fc-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=linux-kernel-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV
          fi

      # - name: Determine Kernel Version and Config Hash
      #   id: kernel_version
      #   run: |
      #     CONFIG_HASH=$(echo -n "${{ inputs.defconfig }}" | md5sum | cut -d ' ' -f 1)
      #     echo "KERNEL_ARTIFACT=linux-kernel-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV
      #     echo "KERNEL_ARTIFACT_FC=linux-kernel-fc-${{ inputs.kernel_version }}-${CONFIG_HASH}" >> $GITHUB_ENV

      - name: Download Kernel Artifact (same run)
        id: dl_same
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./kernel-output

      # - name: Check kernel-output contents
      #   run: |
      #     pwd
      #     ls -l
      #     ls -R ./kernel-output || echo "kernel-output not found"
      
      - name: Get Artifact ID
        if: ${{ steps.dl_same.outcome == 'failure' }}
        id: get_artifact
        uses: actions/github-script@v7
        env:
          HYPERVISOR: ${{ env.HYPERVISOR }}
          KERNEL_ARTIFACT: ${{ env.KERNEL_ARTIFACT }}
          KERNEL_ARTIFACT_FC: ${{ env.KERNEL_ARTIFACT_FC }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const artifactName = process.env.HYPERVISOR === 'qemu'
              ? process.env.KERNEL_ARTIFACT
              : process.env.KERNEL_ARTIFACT_FC;

            console.log(`Looking for artifact: ${artifactName}`);
      
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              status: "completed",
              per_page: 20,
            });
      
            for (const run of runs.data.workflow_runs) {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner,
                repo,
                run_id: run.id,
              });
      
              const artifact = artifacts.data.artifacts.find(a => a.name === artifactName);
              if (artifact) {
                console.log(`Found artifact ID: ${artifact.id}`);
                core.setOutput("artifact_id", artifact.id);
                return;
              }
            }
      
            core.setFailed("Artifact not found.");

      - name: Download Kernel Artifact
        if: ${{ steps.dl_same.outcome == 'failure' }}
        run: |
          curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.get_artifact.outputs.artifact_id }}/zip" -o artifact.zip
          unzip artifact.zip -d ./kernel-output

#      - name: Download Kernel Image QEMU
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.KERNEL_ARTIFACT }}
#          path: ./kernel-output
#
#      - name: Download Kernel Image FC
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.KERNEL_ARTIFACT_FC }}
#          path: ./kernel-output

      - name: List Downloaded Files
        run: ls -l ./kernel-output
      
      - name: Prepare build context
        run: |
          cp ./kernel-output/${{ env.HYPERVISOR == 'qemu' && 'bzImage' || 'vmlinux' }} ./${{ env.UNIKERNEL_NAME }}/
          echo "REGISTRY_IMAGE=${{ env.REGISTRY }}/nubificus/bunny-${{ env.UNIKERNEL_NAME }}-${{ env.HYPERVISOR }}" >> $GITHUB_ENV

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.harbor_user }}
          password: ${{ secrets.harbor_secret }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=sha,prefix=${{ matrix.arch }}-
            type=ref,event=branch,prefix=${{ matrix.arch }}-

      - name: Build and push ${{ matrix.arch }} image 
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.UNIKERNEL_NAME }}
          file: ./${{ env.UNIKERNEL_NAME }}/bunnyfile-linux-${{ env.HYPERVISOR == 'fc' && 'fc' || 'qemu' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/${{ matrix.arch }}
          push: true
          provenance: false
          build-args: |
            ARCHTAG=${{ fromJson(env.RUNNER_ARCH_MAP)[0][matrix.arch] }}
            BRANCH=${{ github.event.ref_name || github.ref_name }}

      - name: Set output digests
        id: set-outputs
        run: |
          echo "digest-${{ env.HYPERVISOR }}-${{ matrix.arch }}=${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT
        shell: bash
